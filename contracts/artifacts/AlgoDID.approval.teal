#pragma version 9

txn ApplicationID
int 0
>
int 6
*
txn OnCompletion
+
switch create_NoOp NOT_IMPLEMENTED NOT_IMPLEMENTED NOT_IMPLEMENTED NOT_IMPLEMENTED NOT_IMPLEMENTED call_NoOp

NOT_IMPLEMENTED:
	err

abi_route_startUpload:
	byte 0x
	dupn 3
	txn GroupIndex
	int 1
	-
	dup
	gtxns TypeEnum
	int pay
	==
	assert
	txna ApplicationArgs 3
	btoi
	txna ApplicationArgs 2
	btoi
	txna ApplicationArgs 1
	callsub startUpload
	int 1
	return

startUpload:
	proto 8 0

	// contracts/algo-did.algo.ts:42
	// assert(this.txn.sender === this.app.creator)
	txn Sender
	txna Applications 0
	app_params_get AppCreator
	assert
	==
	assert

	// contracts/algo-did.algo.ts:44
	// startBox = this.currentIndex.value
	byte "currentIndex"
	app_global_get
	frame_bury -5 // startBox: uint64

	// contracts/algo-did.algo.ts:45
	// endBox = startBox + numBoxes - 1
	frame_dig -5 // startBox: uint64
	frame_dig -2 // numBoxes: uint64
	+
	int 1
	-
	frame_bury -6 // endBox: uint64

	// contracts/algo-did.algo.ts:47
	// metadata: Metadata = {
	frame_dig -5 // startBox: uint64
	itob
	frame_dig -6 // endBox: uint64
	itob
	concat
	byte 0x01
	concat
	frame_dig -3 // endBoxSize: uint64
	itob
	concat
	frame_bury -7 // metadata: Metadata

	// contracts/algo-did.algo.ts:51
	// assert(!this.metadata(pubKey).exists)
	frame_dig -1 // pubKey: address
	box_len
	swap
	pop
	!
	assert

	// contracts/algo-did.algo.ts:53
	// this.metadata(pubKey).value = metadata
	frame_dig -1 // pubKey: address
	frame_dig -7 // metadata: Metadata
	box_put

	// contracts/algo-did.algo.ts:55
	// this.currentIndex.value = endBox + 1
	byte "currentIndex"
	frame_dig -6 // endBox: uint64
	int 1
	+
	app_global_put

	// contracts/algo-did.algo.ts:57
	// totalCost = numBoxes * COST_PER_BOX // cost of data boxes
	frame_dig -2 // numBoxes: uint64
	int 2500
	*
	frame_dig -2 // numBoxes: uint64
	int 1
	-
	int 32768
	*
	int 400
	*
	+
	frame_dig -2 // numBoxes: uint64
	int 8
	*
	int 400
	*
	+
	frame_dig -3 // endBoxSize: uint64
	int 400
	*
	+
	int 2500
	+
	int 8
	int 8
	+
	int 1
	+
	int 8
	+
	int 32
	+
	int 400
	*
	+
	frame_bury -8 // totalCost: uint64

	// contracts/algo-did.algo.ts:63
	// assert(mbrPayment.amount === totalCost)
	frame_dig -4 // mbrPayment: pay
	gtxns Amount
	frame_dig -8 // totalCost: uint64
	==
	assert

	// contracts/algo-did.algo.ts:64
	// assert(mbrPayment.receiver === this.app.address)
	frame_dig -4 // mbrPayment: pay
	gtxns Receiver
	txna Applications 0
	app_params_get AppAddress
	assert
	==
	assert
	retsub

abi_route_upload:
	byte 0x
	txna ApplicationArgs 4
	extract 2 0
	txna ApplicationArgs 3
	btoi
	txna ApplicationArgs 2
	btoi
	txna ApplicationArgs 1
	callsub upload
	int 1
	return

upload:
	proto 5 0

	// contracts/algo-did.algo.ts:77
	// assert(this.txn.sender === this.app.creator)
	txn Sender
	txna Applications 0
	app_params_get AppCreator
	assert
	==
	assert

	// contracts/algo-did.algo.ts:79
	// metadata = this.metadata(pubKey).value
	frame_dig -1 // pubKey: address
	frame_bury -5 // storage key//metadata

	// contracts/algo-did.algo.ts:80
	// assert(metadata.uploading === <uint<8>>1)
	frame_dig -5 // storage key//metadata
	box_get
	assert
	store 0 // full array
	int 0 // initial offset
	int 16 // headOffset
	+
	load 0 // full array
	swap
	int 1
	extract3
	byte 0x01
	b==
	assert

	// contracts/algo-did.algo.ts:81
	// assert(metadata.start <= boxIndex && boxIndex <= metadata.end)
	frame_dig -5 // storage key//metadata
	box_get
	assert
	store 0 // full array
	int 0 // initial offset
	int 0 // headOffset
	+
	load 0 // full array
	swap
	int 8
	extract3
	btoi
	frame_dig -2 // boxIndex: uint64
	<=
	dup
	bz skip_and0
	frame_dig -2 // boxIndex: uint64
	frame_dig -5 // storage key//metadata
	box_get
	assert
	store 0 // full array
	int 0 // initial offset
	int 8 // headOffset
	+
	load 0 // full array
	swap
	int 8
	extract3
	btoi
	<=
	&&

skip_and0:
	assert

	// if0_condition
	// contracts/algo-did.algo.ts:83
	// offset === 0
	frame_dig -3 // offset: uint64
	int 0
	==
	bz if0_end

	// if0_consequent
	// contracts/algo-did.algo.ts:84
	// this.dataBoxes(boxIndex).create(boxIndex === metadata.end ? metadata.endSize : MAX_BOX_SIZE)
	frame_dig -2 // boxIndex: uint64
	itob
	frame_dig -2 // boxIndex: uint64
	frame_dig -5 // storage key//metadata
	box_get
	assert
	store 0 // full array
	int 0 // initial offset
	int 8 // headOffset
	+
	load 0 // full array
	swap
	int 8
	extract3
	btoi
	==
	bz ternary0_false
	frame_dig -5 // storage key//metadata
	box_get
	assert
	store 0 // full array
	int 0 // initial offset
	int 17 // headOffset
	+
	load 0 // full array
	swap
	int 8
	extract3
	btoi
	b ternary0_end

ternary0_false:
	int 32768

ternary0_end:
	box_create

if0_end:
	// contracts/algo-did.algo.ts:87
	// this.dataBoxes(boxIndex).replace(offset, data)
	frame_dig -2 // boxIndex: uint64
	itob
	frame_dig -3 // offset: uint64
	frame_dig -4 // data: bytes
	box_replace
	retsub

abi_route_finishUpload:
	// no dupn needed
	txna ApplicationArgs 1
	callsub finishUpload
	int 1
	return

finishUpload:
	proto 1 0

	// contracts/algo-did.algo.ts:97
	// assert(this.txn.sender === this.app.creator)
	txn Sender
	txna Applications 0
	app_params_get AppCreator
	assert
	==
	assert

	// contracts/algo-did.algo.ts:99
	// this.metadata(pubKey).value.uploading = 0
	frame_dig -1 // pubKey: address
	box_get
	assert
	store 0 // full array
	int 0 // initial offset
	int 16 // headOffset
	+
	load 0 // full array
	swap
	byte 0x00
	replace3
	frame_dig -1 // pubKey: address
	swap
	box_put
	retsub

abi_route_defaultTEALScriptCreate:
	int 1
	return

create_NoOp:
	txn NumAppArgs
	bz abi_route_defaultTEALScriptCreate
	err

call_NoOp:
	method "startUpload(address,uint64,uint64,pay)void"
	method "upload(address,uint64,uint64,byte[])void"
	method "finishUpload(address)void"
	txna ApplicationArgs 0
	match abi_route_startUpload abi_route_upload abi_route_finishUpload
	err